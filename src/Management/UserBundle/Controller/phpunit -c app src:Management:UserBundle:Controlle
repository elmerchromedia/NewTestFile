phpunit -c app src/Management/UserBundle/Controller/DefaultControllerTest.php




<?php

namespace Management\UserBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Management\UserBundle\Form\SignUpUserForm;
use Management\UserBundle\Form\LoginForm;
use Management\UserBundle\Form\EditAccountForm;
use Management\UserBundle\Form\ChangePassForm;
use Management\UserBundle\Form\ForgotPassForm;
use Management\UserBundle\Form\ResetPassForm;
use Management\UserBundle\Entity\User;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\SecurityContext;
use Management\UserBundle\Controller\DefaultController;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class DefaultControllerTest extends WebTestCase
{

    public function testIndexAction(Request $req)
    {
        /*$client = static::createClient();

        // goes to the secure page
        $crawler = $client->request`ST', '/login');

        // redirects to the login page
        $crawler = $client->followRedirect('login');

        // submits the login form
        $form = $crawler->selectButton('login')->form(array('_email' => 'admin', '_password' => 'adminpass'));
        $client->submit($form);

        // redirect to the original page (but now authenticated)
        $crawler = $client->followRedirect('dashboard');

        // check that the page is the right one
        $this->assertCount(1, $crawler->filter('table.title:contains("Username")'));

        // click on the secure link
        $link = $crawler->selectLink('dashboard')->link();
        $crawler = $client->click($link);

        // check that the page is the right one
        $this->assertCount(1, $crawler->filter('div.title:contains("Welcome")'));*/

        $client = static::createClient();
        $crawler = $client->request('GET', '/login');

        // correct login flow
        // test we are in the login page and status code is 200
        $this->assertGreaterThan(0, $crawler->filter('title:contains("Login Now")')->count());
        $this->assertEquals(200, $client->getResponse()->getStatus());

        // test submit with correct credentials
        $form = $crawler->selectButton('submit')->form();
        $crawler = $client->submit($form, array('Email' => 'elmer.malinao@chromedia.com', 'Password' => 'elmer123'));

        // assert that it was redirected to /dashboard
        $this->assertEquals(302, $client->getResponse()->getStatus());
        $this->assertEquals('http://symfony.localhost/app_dev.php/dashboard', $client->getResponse()->headers->get('dashboard'));
        //---- end correct login flow

         //---- logout flow validation
        // request to /admin
        $crawler = $client->request('GET', '/login');
        $logoutLink = $crawler->selectLink('logout')->eq(0)->link();
        $crawler = $client->click($logoutLink); // click logout link
        
        // assert that it was redirected to /login after clicking the logout link
        $this->assertEquals(302, $client->getResponse()->getStatus());
        $this->assertTrue($this->isRedirectedToLoginPage($client));
        //---- end logout flow

        //---- login with invalid credentials
        // request to login page and test for invalid login
        $crawler = $client->request('GET', '/login');
        
        // test submit with invalid credentials
        $formValues = array('Email' => 'elmer.malinao@gmail.com', 'Password' => '8546974585245698122369852211447785222258747456374563365477456336547951'.time());
        $form = $crawler->selectButton('submit')->form();
        $crawler = $client->submit($form, $formValues);
        $crawler = $client->followRedirect();
        $this->assertEquals(200, $client->getResponse()->getStatus());
        $this->assertGreaterThan(0,$crawler->filter('html:contains("Bad credentials")')->count());
        //---- end login with invalid credentials

        //---- login with missing required fields
        $crawler = $client->request('GET', '/login');
        
        // test submit with missing required fields
        $formValues = array();
        $form = $crawler->selectButton('submit')->form();
        $crawler = $client->submit($form, array());
        $crawler = $client->followRedirect();
        $this->assertEquals(200, $client->getResponse()->getStatusCode());
        $this->assertGreaterThan(0,$crawler->filter('html:contains("Bad credentials")')->count()); 
        // look for the text "Bad credentials"
        //---- end login with missing required fields -->

    }

     public function testSignupAction(Request $request) 
    {
        /*$client = static::createClient();

        // goes to the secure page
        $crawler = $client->request('POST', '/signup');

        // redirects to the signup page
        $crawler = $client->followRedirect('signup');

        // submits the signup form
        $form = $crawler->selectButton('form')->form(array('_email' => 'admin', '_password' => 'adminpass', '_firstname' => 'Elmer', '_lastname' => 'Malinao', '_id' => '1'));
        $client->submit($form);

        // redirect to the original page (but now authenticated)
        $crawler = $client->followRedirect('dashboard');

        // check that the page is the right one
        $this->assertCount(1, $crawler->filter('table.title:contains("Username")'));

        // click on the secure link
        $link = $crawler->selectLink('dashboard')->link();
        $crawler = $client->click($link);

        // check that the page is the right one
        $this->assertCount(1, $crawler->filter('div.title:contains("Welcome")'));*/
    }

    public function testdashboardAction()
    {   
  
    }

    public function testchangePassAction() 
    {
        
    }
  

    public function testforgotPassAction()
    {
        
    }

    public function testAction() 
    {
        
    }

    public function testresetPassAction() 
    {
       
       
    }

    /**
     * Send an verification email
     */
    public function testsendEmail($data) 
    {
    
    }

    /**
     * Activate user account
     */

    public function testactivateAccountAction() 
    {
        
    }

    public function testdateDiff($date1p, $date2p) 
    {

    }
}
